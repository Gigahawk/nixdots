# Env
export EDITOR="kak"
export TERM=xterm

export PASSWORD_STORE_ENABLE_EXTENSIONS=true
export PASSWORD_STORE_EXTENSIONS_DIR=$HOME/.nix-profile/lib/password-store/extensions

# ZSH params
REPORTTIME=3

HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.history
APPEND_HISTORY=true

setopt NO_FLOW_CONTROL

# Keybindings
bindkey "^[[3~" delete-char
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word   

autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

unsetopt flow_control

# Completions
export FPATH=$HOME/.nix-profile/share/zsh/site-functions:$FPATH
autoload -Uz compinit

setopt always_to_end
setopt complete_in_word
zmodload zsh/complist
autoload -Uz compinit
compinit

zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Z}{a-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

if [[ ! -e $HOME/.zcompdump ]]; 
then echo "! compinit" >&2; compinit; 
else compinit -C;
fi

# Prompt
autoload -U colors zsh/terminfo
colors

autoload -Uz vcs_info

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' unstagedstr !
precmd () {
    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]] {
        zstyle ':vcs_info:*' formats '%F{cyan}[%b%c%u%f%F{cyan}]%f'
    } else {
        zstyle ':vcs_info:*' formats '%F{cyan}[%b%c%u%f%F{red}‚óè%f%F{cyan}]%f'
    }
    vcs_info
}

function nix_prompt() {
  case $IN_NIX_SHELL in;
    pure) st="[nix-sh(p)]";;
    impure) st="[nix-sh(i)]";;
    *) st="";;
  esac
  echo "%F{cyan}$st"
}

setopt prompt_subst
PS1='${return_code}%F{magenta}%n%f@%F{yellow}%m%f:%B%F{green}%~%f%b ${vcs_info_msg_0_} $(nix_prompt) 
$ '

# Tools

source $HOME/.nix-profile/etc/profile.d/autojump.sh
source $HOME/.nix-profile/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

export FZF_DEFAULT_OPTS='--no-height'
source $HOME/.nix-profile/share/fzf/completion.zsh
source $HOME/.nix-profile/share/fzf/key-bindings.zsh

eval "$(direnv hook zsh)"

# Utils

alias l="exa --long -snew --git"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias r="ranger"

function trace() {
    echo "! $@"; $@
}

function tmp() {
    cd "$(mktemp -d)"
}

function hr() {
    printf '\n%.0s' {1..10}
    for _ in $(seq 1 3); do
        printf '=%.0s' {1..$COLUMNS}
    done
    printf '\n%.0s' {1..10}
}

function qr2pass() {
         [[ -z "$1" ]] && { echo "otp name empty"; return 1; }
         maim --delay 0.5 |
              zbarimg -q --raw /dev/stdin |
              pass otp append "$1"
}

function scratch() {
    base="$HOME/scratch"
    fname="$base/$(date "+%Y-%m-%dT%H:%M:%S-$RANDOM")"
    mkdir -p "$base"
    trace "$EDITOR" "$fname"
}

# Sticky

local zle_sticked=""

zle-line-init() {
    BUFFER="$zle_sticked$BUFFER"
    zle end-of-line
}
zle -N zle-line-init

function zle-set-sticky {
    zle_sticked="$BUFFER"
    zle -M "Sticky: '$zle_sticked'."
}
zle -N zle-set-sticky
bindkey '^S' zle-set-sticky

function accept-line {
    if [[ -z "$BUFFER" ]] && [[ -n "$zle_sticked" ]]; then
        zle_sticked=""
        echo -n "\nRemoved sticky."
    fi
    zle .accept-line
}
zle -N accept-line

# AWS

function _awsListAll() {
    credentialFileLocation=$(env | grep AWS_SHARED_CREDENTIALS_FILE | cut -d= -f2);
    if [ -z $credentialFileLocation ]; then
        credentialFileLocation=~/.aws/credentials
    fi
    while read line; do
        if [[ $line == "["* ]]; then echo "$line"; fi;
    done < $credentialFileLocation;
};

function _awsListProfile() {
    profileFileLocation=$(env | grep AWS_CONFIG_FILE | cut -d= -f2);
    if [ -z $profileFileLocation ]; then
        profileFileLocation=~/.aws/config
    fi
    while read line; do
        if [[ $line == "["* ]]; then echo "$line"; fi;
    done < $profileFileLocation;
};

function _awsGetSourceProfile() {
    local profileName=$1
    profileFileLocation=$(env | grep AWS_CONFIG_FILE | cut -d= -f2);
    if [ -z $profileFileLocation ]; then
        profileFileLocation=~/.aws/config
    fi
    local result
    local currProfile
    while read line; do
        if [[ $line == "[profile $profileName]"* ]]; then 
          trmLine=$(echo $line | xargs)
          currProfile=${trmLine:9:-1}
        elif [[ $currProfile == $profileName && $line == "source_profile"* ]]; then
          result=$(echo $line | cut -d= -f2 | xargs)
        fi
    done < $profileFileLocation;
    echo ${result:-$profileName}
};

function _awsSwitchProfile() {
   if [ -z $1 ]; then  echo "Usage: awsp profilename"; return; fi
   exists="$(aws configure get aws_access_key_id --profile $1)"
   role_arn="$(aws configure get role_arn --profile $1)"
   if [[ -n $exists || -n $role_arn ]]; then
       if [[ -n $role_arn ]]; then
           mfa_serial="$(aws configure get mfa_serial --profile $1)"
           if [[ -n $mfa_serial ]]; then
               sourceProfile=$(_awsGetSourceProfile $1)
               mfa_token=$(pass otp "aws.amazon.com/$sourceProfile")
               if [ $? -ne 0 ]; then
                 echo -n "Please enter your MFA token for $mfa_serial: "
                 read mfa_token
               fi
           fi

           source_profile="$(aws configure get source_profile --profile $1)"
           if [[ -n $source_profile ]]; then
               profile=$source_profile
           else
               profile=$1
           fi

           echo "Assuming role $role_arn using profile $profile"
           if [[ -n $mfa_serial ]]; then
               JSON="$(aws sts assume-role --profile=$profile --role-arn $role_arn --role-session-name "$profile" --serial-number $mfa_serial --token-code $mfa_token)"
           else
               JSON="$(aws sts assume-role --profile=$profile --role-arn $role_arn --role-session-name "$profile")"
           fi

           if ! [[ $? -eq 0 ]]; then
            echo "Authentication error" >&2
            return 1
          fi

           aws_access_key_id="$(echo $JSON | jq -r '.Credentials.AccessKeyId')"
           aws_secret_access_key="$(echo $JSON | jq -r '.Credentials.SecretAccessKey')"
           aws_session_token="$(echo $JSON | jq -r '.Credentials.SessionToken')"
       else
           aws_access_key_id="$(aws configure get aws_access_key_id --profile $1)"
           aws_secret_access_key="$(aws configure get aws_secret_access_key --profile $1)"
           aws_session_token=""
       fi
       export AWS_DEFAULT_PROFILE=$1
       export AWS_ACCESS_KEY_ID=$aws_access_key_id
       export AWS_SECRET_ACCESS_KEY=$aws_secret_access_key
       [[ -z "$aws_session_token" ]] && unset AWS_SESSION_TOKEN || export AWS_SESSION_TOKEN=$aws_session_token

       echo "Switched to AWS Profile: $1";
       aws configure list
   fi
};

alias awsp=_awsSwitchProfile
