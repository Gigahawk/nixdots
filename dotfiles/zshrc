# Env
export EDITOR="kak"
export NIX_PATH=nixpkgs=$HOME/workspace/nixpkgs

export PASSWORD_STORE_ENABLE_EXTENSIONS=true
export PASSWORD_STORE_EXTENSIONS_DIR=/home/utdemir/.nix-profile/lib/password-store/extensions

# ZSH params
REPORTTIME=3

HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.history
APPEND_HISTORY=true

setopt NO_FLOW_CONTROL
setopt NO_CLOBBER

# Keybindings
bindkey "^[[3~" delete-char
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word   

autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

unsetopt flow_control

# Completions
export FPATH=$HOME/.nix-profile/share/zsh/site-functions:$FPATH
autoload -Uz compinit

setopt always_to_end
setopt complete_in_word
zmodload zsh/complist
autoload -Uz compinit
compinit

zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Z}{a-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

if [[ ! -e $HOME/.zcompdump ]]; 
then echo "! compinit" >&2; compinit; 
else compinit -C;
fi

# Prompt
autoload -U colors zsh/terminfo
colors

autoload -Uz vcs_info

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' unstagedstr !
precmd () {
    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]] {
        zstyle ':vcs_info:*' formats '%F{cyan}[%b%c%u%f%F{cyan}]%f'
    } else {
        zstyle ':vcs_info:*' formats '%F{cyan}[%b%c%u%f%F{red}‚óè%f%F{cyan}]%f'
    }
    vcs_info
}

function nix_prompt() {
  case $IN_NIX_SHELL in;
    pure) st="[nix-sh(p)]";;
    impure) st="[nix-sh(i)]";;
    *) st="";;
  esac
  echo "%F{cyan}$st"
}

setopt prompt_subst
PS1='${return_code}%F{magenta}%n%f@%F{yellow}%m%f:%B%F{green}%~%f%b ${vcs_info_msg_0_} $(nix_prompt) 
$ '

# Tools

source $HOME/.nix-profile/etc/profile.d/autojump.sh
source $HOME/.nix-profile/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

export FZF_DEFAULT_OPTS='--no-height'
source $HOME/.nix-profile/share/fzf/completion.zsh
source $HOME/.nix-profile/share/fzf/key-bindings.zsh

eval "$(direnv hook zsh)"

# Utils

alias l="exa --long -snew --git"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias r="ranger"

function trace() {
    echo "! $@"; $@
}

function tmp() {
    cd "$(mktemp -d)"
}

function hr() {
    printf '\n%.0s' {1..10}
    for _ in $(seq 1 3); do
        printf '=%.0s' {1..$COLUMNS}
    done
    printf '\n%.0s' {1..10}
}

function qr2pass() {
         [[ -z "$1" ]] && { echo "otp name empty"; return 1; }
         maim --delay 0.5 |
              zbarimg -q --raw /dev/stdin |
              pass otp append "$1"
}

# Sticky

local zle_sticked=""

zle-line-init() {
    BUFFER="$zle_sticked$BUFFER"
    zle end-of-line
}
zle -N zle-line-init

function zle-set-sticky {
    zle_sticked="$BUFFER"
    zle -M "Sticky: '$zle_sticked'."
}
zle -N zle-set-sticky
bindkey '^S' zle-set-sticky

function accept-line {
    if [[ -z "$BUFFER" ]] && [[ -n "$zle_sticked" ]]; then
        zle_sticked=""
        echo -n "\nRemoved sticky."
    fi
    zle .accept-line
}
zle -N accept-line
